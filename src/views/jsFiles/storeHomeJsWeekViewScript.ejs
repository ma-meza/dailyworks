<style>
  @media screen and (min-width:780px){
    .scheduleHoursContainerWrapperWeekView{
      left:0;
      position:absolute;
      top:0px;
      width:50px;
      height:auto;
      border:none;
    }
    .tableLinesContainerInsideWeekViewInsideWrapper{
        position: absolute;
        top:0px;
        width:calc(100% - 50px) !important;
        left:50px;
    }
    .partWidthDaysTitleContainerWeekView{
      position:absolute;
      left:50px;
      width:calc(100% - 50px);
      height:100%;
      top:0;
    }
  }



  @media screen and (max-width:780px){
    .scheduleHoursContainerWrapperWeekView{
      left:0;
      position:absolute;
      top:0;
      width:50px;
      height:auto;
      border:none;
    }
    .tableLinesContainerInsideWeekViewInsideWrapper{
        position: absolute;
        top: 0;
        width:calc(100% - 50px);
        left:50px;
    }
    .partWidthDaysTitleContainerWeekView{
      position:absolute;
      left:50px;
      width:calc(100% - 50px);
      height:100%;
      top:0;
    }
  }




.tablePlaceholderForOneHour{
  position:relative;
  top:0;
  width:100%;
  margin:0 0 0 0;
  left:0;
  border-width: 0.7 0 0.7 0;
  border-style:solid;
  border-color:#000;
  border-collapse:collapse;
}
.tablePlaceholderForOneHour tr{
  border-width:0.5 0 0.5 0;
  border-style:solid;
  border-color:#000;
}
.tablePlaceholderForOneHour td{
  border-width:0 0.5 0 0.5;
  border-style:solid;
  border-color:#000;
}
.tableLinesContainerInsideWeekView{
  overflow-y:auto;
    position: relative;
    left: 0;
    width: 100%;
    height:100%;
    top:30px;
}
.individualHourContainerInsideWrapperWeekView{
  left:0;
  top:0;
  margin:0;
  position:relative;
  width:100%;
  text-align:center;
}
.individualHourPWeekView{
  top:0;
  margin:0;
  position:relative;
  width:90%;
  left:5%;
  text-align:center;
  padding:0 1 0 1;
  font-size:var(--mobile-font-size-extra-small);
  font-weight:var(--mobile-font-weight-regular);
  color:var(--font-color-grey);

}
.dashedZoneDiv{
  background-color:transparent;
  background-size:12px 12px;
  position:absolute;
  background-image:linear-gradient(45deg, transparent 46%, rgba(58, 122, 182, 1) 49%, transparent 55%);
}
.storeClosedDayDiv{
  background-color:transparent;
  background-size:12px 12px;
  position:absolute;
  background-image:linear-gradient(45deg, transparent 46%, rgba(58, 122, 182, 1) 49%, transparent 55%);
}
.fullWidthDaysTitleContainerWeekView{
  width:100%;
  top:0;
  position:absolute;
  left:0;
  background-color:#fff;
  height:30px;
}
.dayTitleContainerWeekView{
  top:0;
  position:absolute;
  height:100%;
  text-align:center;
  border-style:solid;
  border-width:0 0 0.5 0;
  border-color:#000;
  font-size:var(--mobile-font-size-small);
  line-height:calc(var(--mobile-font-size-small) * 2);
}

#multiDayEventMainContainer{
position:relative;
left:0px;
min-height:70px;
top:0px;
width:100%;
}
.multiDayEventSpecificContainer{
height:70px;
border:0.5px solid #000;
padding:10px 0 0 0;
vertical-align:top;
}
#multiDayEventTitleContainer{
  width:50px;
  height:100%;
  border:none;
  position:absolute;
  left:0;
  top:0px;
}
#multiDayEventRightContainer{
position:relative;
left:50px;
width:calc(100% - 50px);
top:0;
min-height:70px;
}

#fullWidthMainScheduleContainer{
  position:relative;
  top:0;
  left:0;
  height:auto;
  width:100%;
}
.partDayEventBlockDivContainer{
position:absolute;
border:0.5px solid #fff;
border-radius:var(--official-border-radius);
overflow:hidden;
padding:5px 0 5px 0;
cursor:pointer;
}
.fullDayEventBlockDivContainer{
  position:relative;
  top:0;
  width:calc(100% - 2px);
  left:1px;
  margin-bottom:10px;
  height:auto;
  max-height:80px;
  min-height:50px;
  overflow:hidden;
  /* border:0.5px solid #fff; */
  border-radius:var(--official-border-radius);
  padding:5px 0 5px 0;
  cursor:pointer;
}

.multiDayEventTable{
  width:100%;
  border-collapse:collapse;
}
.eventServiceRegularP{
  width:calc(100% - 10px);
  left:5px;
  position:relative;
  overflow-wrap:break-word;
  font-size:12px;
  margin:0 0 5px 0;
  font-weight:var(--mobile-font-weight-regular);
}
.eventServiceBoldP{
  width:calc(100% - 10px);
  left:5px;
  position:relative;
  overflow-wrap:break-word;
  font-size:12px;
  font-weight:var(--mobile-font-weight-bold);
  margin:0 0 5px 0;
}
</style>

<script>

  function createWeekViewCalendar(employeeValue){

    hideMonthWeekDateRangeContainer();
    document.getElementById('weekViewWeekRangeContainer').style.display = 'inline-block';





    var mainDivOfWeek = document.getElementById("scheduleContainerMainDiv");
    mainDivOfWeek.innerHTML="";

    var monthNumber = dateSelected.getMonth();
    var yearNumber = dateSelected.getFullYear();



    var earliestStartTime = 1440; //24h in minutes
    var latestEndTime = 0;
    var openedDays = [];

var storeScheduleFromStoreObjLength = serverStoreObj.storeSchedule.length;
for(var x=0;x<storeScheduleFromStoreObjLength;x++){
  if(serverStoreObj.storeSchedule[x].startTime != 0 && serverStoreObj.storeSchedule[x].endTime != 0){
    if(earliestStartTime > serverStoreObj.storeSchedule[x].startTime){
      earliestStartTime = minutestoFloorHourInMinutes(serverStoreObj.storeSchedule[x].startTime);
    }
    if(latestEndTime < serverStoreObj.storeSchedule[x].endTime){
      latestEndTime = minutesToCeilingHourInMinutes(serverStoreObj.storeSchedule[x].endTime);
    }
    openedDays.push(serverStoreObj.storeSchedule[x].weekDay);
  }
}
var oneMinuteBlockHeight = 0;

var windowWidth = window.innerWidth;
//tablet size and mobile in px
if(windowWidth<900){
oneMinuteBlockHeight = 1.5;
}else{
  //computer and tv size
oneMinuteBlockHeight = 1.9;
}


    // document.getElementById("weekNameRangeDiv").innerHTML = getWeekRangeString(myDate);
    var weekDateArray = getWeekDateArray(dateSelected);
    var firstDayDateArray = new Date(weekDateArray[0]);
    var lastDayDateArray = new Date(weekDateArray[weekDateArray.length-1]);

    var weekRangeString = monthName[firstDayDateArray.getMonth()]+" "+firstDayDateArray.getDate()+" - "+monthName[lastDayDateArray.getMonth()]+" "+lastDayDateArray.getDate();
    document.getElementById("weekViewWeekRangeP").innerText = weekRangeString;



    var datesDisplayedInOrder = [];

    for(var w=0;w<openedDays.length;w++){

      var dateGiven = new Date(weekDateArray[openedDays[w]]);
      datesDisplayedInOrder.push(dateGiven);

    }

//in percent
    var hourLeftBarDivWidth = 10;

      var nbMinutesToDisplay = latestEndTime - earliestStartTime;
      var nbWorkDays = openedDays.length;

//in percent
      var cellWidth = 100/nbWorkDays;


var absencesDayInOrder = [];
for(var g=0;g<weekDateArray.length;g++){
  absencesDayInOrder.push(null);
}


//set absence days of store
for(var s=0;s<serverStoreObj.storeAbsences.length;s++){
  //absence 1 day
  if( serverStoreObj.storeAbsences[s].endDate == -1 ){
    var posInWeekDateArray = posInWeekDateArray(weekDateArray, new Date(serverStoreObj.storeAbsences[s].startDate));

    if(posInWeekDateArray != -1){
      var absenceObj = new Object();
      absenceObj.startTime = serverStoreObj.storeAbsences[s].startTime;
      absenceObj.endTime = serverStoreObj.storeAbsences[s].endTime;

      absencesDayInOrder[posInWeekDateArray] = absenceObj;
    }


    //absence multiple days
  }else{
    var hasAddedAnAbsenceDay = false;
    var startDateAbsence = new Date(serverStoreObj.storeAbsences[s].startDate);
    var endDateAbsence = new Date(serverStoreObj.storeAbsences[s].endDate);

    for(newDate = startDateAbsence, nbAbsenceAdded = 0; nbAbsenceAdded < weekDateArray.length, newDate<=endDateAbsence; newDate.setDate(newDate.getDate()+1)){

            function posInWeekDateArrayFNCT(weekArray, dateWanted){
                  for(var y=0;y<weekArray.length;y++){
                          if(sameDate(dateWanted, new Date(weekArray[y]))){
                        return y;
                          }
                  }
            return -1;
            }

            var posOfLastAbsenceInSerie = 0;
      var itsPositionInWeekDateArray = posInWeekDateArrayFNCT(weekDateArray, newDate);
                                if(itsPositionInWeekDateArray != -1){
                                  posOfLastAbsenceInSerie = itsPositionInWeekDateArray;
                                          var absenceObj = new Object();
                                          if(hasAddedAnAbsenceDay){
                                            absenceObj.startTime = -1;
                                          }else{
                                            absenceObj.startTime = serverStoreObj.storeAbsences[s].startTime;
                                          }
                                  absenceObj.endTime = -1;
                                  hasAddedAnAbsenceDay = true;
                                  nbAbsenceAdded++;
                                  absencesDayInOrder[itsPositionInWeekDateArray] = absenceObj;
                                }else{
                                        if(hasAddedAnAbsenceDay){
                                          break;
                                        }

                                }

    }
    if(itsPositionInWeekDateArray !=-1){
      absencesDayInOrder[itsPositionInWeekDateArray].endTime = serverStoreObj.storeAbsences[s].endTime;

    }







  }
}

function posInWeekDateArray(weekArray, dateWanted){
for(var y=0;y<weekArray.length;y++){
  if(sameDate(dateWanted, new Date(weekArray[y]))){
return y;
  }
}
return -1;
}




      var fullWidthMainScheduleContainer = document.createElement('div');
      fullWidthMainScheduleContainer.id = 'fullWidthMainScheduleContainer';




      var scheduleTableContainerDiv = document.createElement('div');
      scheduleTableContainerDiv.classList.add('tableLinesContainerInsideWeekView');

      var scheduleHoursContainerWrapper = document.createElement('div');
      scheduleHoursContainerWrapper.classList.add('scheduleHoursContainerWrapperWeekView');

      var scheduleTableContainerDivInsideWrapper = document.createElement('div');
      scheduleTableContainerDivInsideWrapper.classList.add('tableLinesContainerInsideWeekViewInsideWrapper');








      var multiDayEventContainer = document.createElement('div');
      var multiDayEventRightContainer = document.createElement('div');
      var multiDayEventTitleContainer = document.createElement('div');
      var multiDayEventPTitle = document.createElement('p');




      var multiDayEventTable = document.createElement('table');
      multiDayEventTable.classList.add('multiDayEventTable');
      var multiDayEventTableTr = document.createElement('tr');
      multiDayEventTable.appendChild(multiDayEventTableTr);








      multiDayEventPTitle.innerText = translateWord("All day");

      multiDayEventContainer.id = "multiDayEventMainContainer";
      multiDayEventRightContainer.id = 'multiDayEventRightContainer';
      multiDayEventTitleContainer.id="multiDayEventTitleContainer";
      multiDayEventPTitle.classList.add("individualHourPWeekView");

      scheduleTableContainerDiv.appendChild(multiDayEventContainer);
      multiDayEventContainer.appendChild(multiDayEventRightContainer);
      multiDayEventRightContainer.appendChild(multiDayEventTable);
      multiDayEventContainer.appendChild(multiDayEventTitleContainer);
      multiDayEventTitleContainer.appendChild(multiDayEventPTitle);


      for(var we=0;we<openedDays.length;we++){
        var multiDayEventTableTd = document.createElement('td');
        multiDayEventTableTd.classList.add('multiDayEventSpecificContainer');
        multiDayEventTableTd.style.width = "calc(100% / "+openedDays.length+" - 1px)";

        // var specificDayMultiDayEventContainer = document.createElement('div');
        // specificDayMultiDayEventContainer.classList
        // specificDayMultiDayEventContainer.id = "multiDayEvent"+openedDays[we];
        // specificDayMultiDayEventContainer.style.width = "calc(100% / "+openedDays.length+")";
        // specificDayMultiDayEventContainer.style.left = "calc(100% / "+openedDays.length+" * "+we;
        // specificDayMultiDayEventContainer.style.left = "0";
        multiDayEventTableTr.appendChild(multiDayEventTableTd);
        // multiDayEventRightContainer.appendChild(specificDayMultiDayEventContainer);
      }











      for(d=0;d<nbMinutesToDisplay;d+=60){


        var hourToDisplay = minutesToHourInt(earliestStartTime + d);
        if(hourToDisplay>=12){
          hourToDisplay += ":00 PM";
        }else{
          hourToDisplay += ":00 AM";
        }
        var individualHourContainer =  document.createElement('div');
        individualHourContainer.style.height = (oneMinuteBlockHeight*60)+"px";
        individualHourContainer.classList.add('individualHourContainerInsideWrapperWeekView');
        var hourPWeekView = document.createElement('p');
        hourPWeekView.classList.add('individualHourPWeekView');
        hourPWeekView.innerText = hourToDisplay;
        individualHourContainer.appendChild(hourPWeekView);
        scheduleHoursContainerWrapper.appendChild(individualHourContainer);





        var tablePlaceholderForOneHour = document.createElement('table');
        tablePlaceholderForOneHour.classList.add("tablePlaceholderForOneHour");
        tablePlaceholderForOneHour.style.height = (oneMinuteBlockHeight*60)+"px";
        for(var f=0;f<4;f++){
          var rowInTable = document.createElement('tr');
          rowInTable.classList.add('rowInTablePlaceholder');
          for(var g=0;g<nbWorkDays;g++){
            var tdInTable = document.createElement('td');
            tdInTable.classList.add('TDinTablePlaceholder');
            rowInTable.appendChild(tdInTable);
          }
          tablePlaceholderForOneHour.appendChild(rowInTable);
        }
        scheduleTableContainerDivInsideWrapper.appendChild(tablePlaceholderForOneHour);
      }

      scheduleTableContainerDiv.appendChild(fullWidthMainScheduleContainer);

      fullWidthMainScheduleContainer.appendChild(scheduleTableContainerDivInsideWrapper);
      fullWidthMainScheduleContainer.appendChild(scheduleHoursContainerWrapper);

      mainDivOfWeek.appendChild(scheduleTableContainerDiv);














//do the closing hours dashed divs
      var storeScheduleFromStoreObjLength = serverStoreObj.storeSchedule.length;
      for(var x=0;x<storeScheduleFromStoreObjLength;x++){



                var indexInOpenedDaysArray = openedDays.indexOf(serverStoreObj.storeSchedule[x].weekDay);


                // var daysToJumpForLeft = 0;
                // for(var c=0;c<openedDays[indexInOpenedDaysArray];c++){
                //   if(openedDays.indexOf(c) == -1){
                //
                //     daysToJumpForLeft--;
                //   }
                // }
                  if(indexInOpenedDaysArray != -1){

                    var finalLeftPositionOfDivs = (((100)/nbWorkDays * indexInOpenedDaysArray));

                      if(absencesDayInOrder[x] != null){

                        var theAbsenceDayObj = absencesDayInOrder[x];

                                          var divTotalHeight = 0;
                                          var divTopValue = 0;

                                          //set values of height and top depending on start and end
                                          if(theAbsenceDayObj.startTime == -1 && theAbsenceDayObj.endTime == -1){
                                            divTotalHeight = nbMinutesToDisplay * oneMinuteBlockHeight;
                                            divTopValue = 0;
                                          }else if(theAbsenceDayObj.startTime != -1 && theAbsenceDayObj.endTime != -1){
                                            divTopValue = (theAbsenceDayObj.startTime - earliestStartTime)*oneMinuteBlockHeight;
                                            divTotalHeight = (theAbsenceDayObj.endTime - theAbsenceDayObj.startTime)*oneMinuteBlockHeight;
                                          }else if(theAbsenceDayObj.startTime != -1){
                                            divTopValue = (theAbsenceDayObj.startTime - earliestStartTime)*oneMinuteBlockHeight;
                                            divTotalHeight = (latestEndTime - theAbsenceDayObj.startTime)*oneMinuteBlockHeight;

                                          }else{
                                            divTopValue = 0;
                                            divTotalHeight = (theAbsenceDayObj.endTime - earliestStartTime)*oneMinuteBlockHeight;

                                          }
                                          //the store is closed on that day

                                          var closedDayDiv = document.createElement('div');
                                          closedDayDiv.style.width = cellWidth+"%";
                                          closedDayDiv.style.height = divTotalHeight+"px";
                                          closedDayDiv.style.left = finalLeftPositionOfDivs+"%";
                                          closedDayDiv.style.top = divTopValue+"px";
                                          closedDayDiv.classList.add('storeClosedDayDiv');
                                          scheduleTableContainerDivInsideWrapper.appendChild(closedDayDiv);






                      }


                        //the store is not closed on that date and display opening hours dash zone
                        if(earliestStartTime < serverStoreObj.storeSchedule[x].startTime){

                          var heightUnknownDashedZone = - earliestStartTime + serverStoreObj.storeSchedule[x].startTime;
                          var dashedZoneDiv = document.createElement('div');
                          dashedZoneDiv.classList.add('dashedZoneDiv');
                          dashedZoneDiv.style.width = (100/nbWorkDays)+"%";
                          dashedZoneDiv.style.height = oneMinuteBlockHeight * heightUnknownDashedZone;

                          dashedZoneDiv.style.left = finalLeftPositionOfDivs+"%";
                          dashedZoneDiv.style.top = 0;
                          scheduleTableContainerDivInsideWrapper.appendChild(dashedZoneDiv);
                        }
                        if(latestEndTime > serverStoreObj.storeSchedule[x].endTime){
                          var heightUnknownDashedZone = latestEndTime - serverStoreObj.storeSchedule[x].endTime;
                          var dashedZoneDiv = document.createElement('div');
                          dashedZoneDiv.classList.add('dashedZoneDiv');
                          dashedZoneDiv.style.width = (100/nbWorkDays)+"%";
                          dashedZoneDiv.style.height = oneMinuteBlockHeight * heightUnknownDashedZone;
                          dashedZoneDiv.style.left = finalLeftPositionOfDivs+"%";
                          dashedZoneDiv.style.bottom = 0;
                          scheduleTableContainerDivInsideWrapper.appendChild(dashedZoneDiv);
                        }


                  }




      }













      var fullWidthDaysTitleContainer = document.createElement('div');
      fullWidthDaysTitleContainer.classList.add('fullWidthDaysTitleContainerWeekView');

      var partWidthDaysTitleContainer = document.createElement('div');
      partWidthDaysTitleContainer.classList.add('partWidthDaysTitleContainerWeekView');



            for(var w=0;w<datesDisplayedInOrder.length;w++){

              var dateGiven = new Date(datesDisplayedInOrder[w]);
              var dayTitleContainer = document.createElement('div');
              dayTitleContainer.innerText = translateWord(weekDayName[dateGiven.getDay()]) +", "+dateGiven.getDate();
              dayTitleContainer.classList.add('dayTitleContainerWeekView');
              var actualWidthPercent = 100/nbWorkDays;
              dayTitleContainer.style.width = "calc(100% /"+nbWorkDays+")";
              dayTitleContainer.style.left = "calc(100% /"+nbWorkDays+" * "+w+")";

              partWidthDaysTitleContainer.appendChild(dayTitleContainer);
            }
            fullWidthDaysTitleContainer.appendChild(partWidthDaysTitleContainer);
            mainDivOfWeek.appendChild(fullWidthDaysTitleContainer);
























            //initialize array for events
            var allEventsObj = <%- JSON.stringify(eventsObj) %>;
            var eventsArrayCollisions = new Array();
            var allDayOrMultiDayEvents = new Array();
            var allDayEventsColors = new Array();
            for(var i=0;i<openedDays.length;i++){
              eventsArrayCollisions.push([]);
              allDayOrMultiDayEvents.push([]);
              allDayEventsColors.push([]);
            }


            if(employeeValue == -1){
              //no preference for employee value
              //iterate through each array check for collision
              for(var yo=0;yo<allEventsObj.length;yo++){
                  if(eventIsInsideRange(allEventsObj[yo], firstDayDateArray, lastDayDateArray)){
                    var eventDayOfWeek = new Date(allEventsObj[yo].backendDateObjStart).getDay();
                    var positionOfWeekDayInOpenedDaysArray = openedDays.indexOf(eventDayOfWeek);

                    if(!sameDate(new Date(allEventsObj[yo].backendDateObjStart), new Date(allEventsObj[yo].backendDateObjEnd))){
                      var colorBlock = "hsla("+Math.floor(Math.random() * (360 + 1))+",75%,75%,1)";
                      //event is multiday
                      var eventStartDateObj = new Date(allEventsObj[yo].backendDateObjStart);
                      var eventEndDateObj = new Date(allEventsObj[yo].backendDateObjEnd);
                      var durationEventDays = getEventDurationInDays(eventStartDateObj, eventEndDateObj);
                      var nbEventsPlaced = 0;
                      for(var fe=0;fe<durationEventDays;fe++){
                        if(nbEventsPlaced == datesDisplayedInOrder.length){
                          break;
                        }
                        for(var ps=0;ps<datesDisplayedInOrder.length;ps++){
                          if(sameDate(eventStartDateObj, datesDisplayedInOrder[ps])){
                            allDayOrMultiDayEvents[ps].push(yo);
                            allDayEventsColors[ps].push(colorBlock);
                            nbEventsPlaced++;
                            break;
                          }
                        }
                        eventStartDateObj.setDate(eventStartDateObj.getDate() +1);
                      }
                    }else if(positionOfWeekDayInOpenedDaysArray != -1){
                      //event is one day

                      //event is during opened days and event is inside range of good one week
                      var eventHasBeenPlacedInArray = false;

                        for(var xx=0;xx<eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray].length;xx++){
                          for(var tt = 0;tt<eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray][xx].length;tt++){
                            //put event in same array if do not overlap
                            console.log(eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray][xx][tt]+", "+yo);
                            if(!eventsOverlapEJS(allEventsObj[eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray][xx][tt]], allEventsObj[yo])){
                              console.log('yep');
                              eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray][xx].push(yo);
                              eventHasBeenPlacedInArray = true;
                              break;
                            }
                          }
                          if(eventHasBeenPlacedInArray){
                            break;
                          }
                        }
                        if(!eventHasBeenPlacedInArray){
                          eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray].push([yo]);
                        }
                    }
                  }

              }
            }else{
              //yes preference for employee display
              //iterate through each array check for collision
              for(var yo=0;yo<allEventsObj.length;yo++){
                if(employeeValue == allEventsObj[yo].employeeId){
                  if(eventIsInsideRange(allEventsObj[yo], firstDayDateArray, lastDayDateArray)){
                    if(!sameDate(new Date(allEventsObj[yo].backendDateObjStart), new Date(allEventsObj[yo].backendDateObjEnd))){
                      //event is multiday

                      var eventStartDateObj = new Date(allEventsObj[yo].backendDateObjStart);
                      var eventEndDateObj = new Date(allEventsObj[yo].backendDateObjEnd);
                      var durationEventDays = getEventDurationInDays(eventStartDateObj, eventEndDateObj);
                      var nbEventsPlaced = 0;
                      for(var fe=0;fe<durationEventDays;fe++){
                        if(nbEventsPlaced == datesDisplayedInOrder.length){
                          break;
                        }
                        for(var ps=0;ps<datesDisplayedInOrder.length;ps++){
                          if(sameDate(eventStartDateObj, datesDisplayedInOrder[ps])){
                            allDayOrMultiDayEvents[ps].push(yo);
                            nbEventsPlaced++;
                            break;
                          }
                        }
                        eventStartDateObj.setDate(eventStartDateObj.getDay() +1);
                      }
                    }else if(positionOfWeekDayInOpenedDaysArray != -1){
                      //event is during opened days and event is inside range of good one week
                      var eventDayOfWeek = new Date(allEventsObj[yo].backendDateObjStart).getDay();
                      var positionOfWeekDayInOpenedDaysArray = openedDays.indexOf(eventDayOfWeek);
                        var eventHasBeenPlacedInArray = false;
                        for(var xx=0;xx<eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray].length;xx++){
                          eventHasBeenPlacedInArray = true;
                          for(var tt = 0;tt<eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray][xx].length;tt++){
                            //put event in same array if do not overlap
                            if(!eventsOverlapEJS(allEventsObj[eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray][xx][tt]], allEventsObj[yo])){
                              eventsArrayCollisions[eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray][xx]].push(yo);
                              eventHasBeenPlacedInArray = true;
                            }
                          }
                        }
                        if(!eventHasBeenPlacedInArray){
                          eventsArrayCollisions[positionOfWeekDayInOpenedDaysArray].push([yo]);
                        }
                    }
                  }
                }
              }
            }

            console.log(eventsArrayCollisions);




            //styling of 1 day events
            for(var numOfLeftWeekDay=0;numOfLeftWeekDay<eventsArrayCollisions.length;numOfLeftWeekDay++){
              for(var xo = 0;xo<eventsArrayCollisions[numOfLeftWeekDay].length;xo++){
                for(var se=0;se<eventsArrayCollisions[numOfLeftWeekDay][xo].length;se++){
                  var eventBlockTimeDiv = document.createElement('div');
                  var eventStartTimeInDecimal = timeToDecimal(new Date(allEventsObj[eventsArrayCollisions[numOfLeftWeekDay][xo][se]].backendDateObjStart));
                  var eventEndTimeInDecimal = timeToDecimal(new Date(allEventsObj[eventsArrayCollisions[numOfLeftWeekDay][xo][se]].backendDateObjEnd));

                  var eventTopPos = (eventStartTimeInDecimal - earliestStartTime)*oneMinuteBlockHeight;
                  var eventHeightValue =(eventEndTimeInDecimal - eventStartTimeInDecimal)*oneMinuteBlockHeight;

                  eventBlockTimeDiv.classList.add('partDayEventBlockDivContainer');
                  eventBlockTimeDiv.style.backgroundColor = "hsla("+Math.floor(Math.random() * (360 + 1))+",75%,75%,1)";
                  eventBlockTimeDiv.style.left = "calc((("+numOfLeftWeekDay+" / "+eventsArrayCollisions.length +") + (("+xo+" / "+eventsArrayCollisions[numOfLeftWeekDay].length+") / "+eventsArrayCollisions.length+")) * 100%)";
                  eventBlockTimeDiv.style.width = "calc(100% / "+eventsArrayCollisions.length+" / "+eventsArrayCollisions[numOfLeftWeekDay].length+")";

                  eventBlockTimeDiv.style.top = eventTopPos+"px";
                  eventBlockTimeDiv.style.height = eventHeightValue+"px";
                  scheduleTableContainerDivInsideWrapper.appendChild(eventBlockTimeDiv);

                  var eventClientString = allEventsObj[eventsArrayCollisions[numOfLeftWeekDay][xo][se]].clientName;
                  var eventClientP = document.createElement('p');
                  eventClientP.innerText = eventClientString;
                  eventClientP.classList.add('eventServiceBoldP');
                  eventBlockTimeDiv.appendChild(eventClientP);

                  var eventServiceString = "";
                  for(var ye=0;ye<allEventsObj[eventsArrayCollisions[numOfLeftWeekDay][xo][se]].services.length;ye++){
                    eventServiceString+=allEventsObj[eventsArrayCollisions[numOfLeftWeekDay][xo][se]].services[ye].serviceName+", ";
                  }
                  eventServiceString = eventServiceString.substring(0, eventServiceString.length - 2);
                  var eventServiceP = document.createElement('p');
                  eventServiceP.innerText = eventServiceString;
                  eventServiceP.classList.add('eventServiceRegularP');
                  eventBlockTimeDiv.appendChild(eventServiceP);



                  var eventDateTimeString = getStartAndEndDateString(new Date(allEventsObj[eventsArrayCollisions[numOfLeftWeekDay][xo][se]].backendDateObjStart), new Date(allEventsObj[eventsArrayCollisions[numOfLeftWeekDay][xo][se]].backendDateObjEnd));
                  var eventDateTimeP = document.createElement('p');
                  eventDateTimeP.innerText = eventDateTimeString;
                  eventDateTimeP.classList.add('eventServiceRegularP');
                  eventBlockTimeDiv.appendChild(eventDateTimeP);

                  eventBlockTimeDiv.onclick = function(){
                    createMoreInfoEventDiv(allEventsObj[1]);
                  }
                }
              }
            }



            //styling the full day and multi days events
            for(var te=0;te<allDayOrMultiDayEvents.length;te++){
              for(var xi=0;xi<allDayOrMultiDayEvents[te].length;xi++){
                var eventBlockDiv = document.createElement('div');
                eventBlockDiv.classList.add('fullDayEventBlockDivContainer');
                eventBlockDiv.style.backgroundColor = allDayEventsColors[te][xi];


                var eventClientString = allEventsObj[allDayOrMultiDayEvents[te][xi]].clientName;
                var eventClientP = document.createElement('p');
                eventClientP.innerText = eventClientString;
                eventClientP.classList.add('eventServiceBoldP');
                eventBlockDiv.appendChild(eventClientP);

                var eventServiceString = "";
                for(var ye=0;ye<allEventsObj[allDayOrMultiDayEvents[te][xi]].services.length;ye++){
                  eventServiceString+=allEventsObj[allDayOrMultiDayEvents[te][xi]].services[ye].serviceName+", ";
                }
                eventServiceString = eventServiceString.substring(0, eventServiceString.length - 2);

                var eventServiceP = document.createElement('p');
                eventServiceP.innerText = eventServiceString;
                eventServiceP.classList.add('eventServiceRegularP');
                eventBlockDiv.appendChild(eventServiceP);


                var eventDateTimeString = getStartAndEndDateString(new Date(allEventsObj[allDayOrMultiDayEvents[te][xi]].backendDateObjStart), new Date(allEventsObj[allDayOrMultiDayEvents[te][xi]].backendDateObjEnd));
                var eventDateTimeP = document.createElement('p');
                eventDateTimeP.innerText = eventDateTimeString;
                eventDateTimeP.classList.add('eventServiceRegularP');
                eventBlockDiv.appendChild(eventDateTimeP);

                eventBlockDiv.onclick = function(){
                  createMoreInfoEventDiv(allEventsObj[1]);
                }




                document.getElementsByClassName('multiDayEventSpecificContainer')[te].appendChild(eventBlockDiv);
              }

            }






  }


  function getWeekDateArray(myDate){
    var passedDate = myDate;
  var weekDateArray = [];
    //get Dates of specific week set in array
      for (var i = 0; i <7; i++) {
        var firstDayWeek = passedDate.getDate() - passedDate.getDay() + i;
        var newDate = new Date(passedDate.setDate(firstDayWeek));

        weekDateArray.push(newDate.getFullYear()+"/"+((newDate.getMonth()+1)+"/"+newDate.getDate()));

      }
      return weekDateArray;
  }

</script>
