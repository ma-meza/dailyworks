<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="/jsFiles/miscFunctions.js" async></script>
  <link rel="stylesheet" rel="preload" as="style" href="/css/styleGuidelines.css">

<link rel="preload" as="font" type="font/woff2"
  href="./fonts/roboto-v20-latin-900.woff2" crossorigin>

<link rel="preload" as="font" type="font/woff2"
  href="./fonts/roboto-v20-latin-regular.woff2" crossorigin>
</head>


<script>
  window.addEventListener('DOMContentLoaded', (event) => {
    console.log('DOM fully loaded and parsed');
});
</script>

<script>
  <% if(locals.languageCookie){%>
    var languageCookie = '<%= languageCookie %>'
  <% }else{ %>
    var languageCookie = "";
  <% } %>


function translateWord(wordToTranslate){
  if(languageCookie){
    if(languageCookie == "fr"){
      var frTranslateDict =
        {
        	"Today": "Aujourd'hui",
          "No more phone calls, let your customers book their own appointments online.":"Ne perdez plus de temps au téléphone, laissez vos clients prendre rendez-vous en ligne.",
        	"New Appointment": "Nouveau Rendez-Vous",
          "We let potential customers know you have a schedule opening when their favorite business doesn't.":"Nous informons vos clients potentiels que vous êtes disponible quand leur commerce favori ne l'est pas.",
          "Let customers fill your agenda online while you focus on running your business.":"Laissez les gens prendre leurs rendez-vous en ligne pendant que vous vous concentrez à servir vos clients.",
        	"Search client (name, email, phone)": "Recherche de client (nom, courriel, téléphone)",
        	"or": "ou",
        	"Create new client": "Créer nouveau client",
        	"Search client (name, e-mail, phone)": "Recherche de client (name, e-mail, phone)",
        	"New client": "Nouveau client",
        	"Client profile": "Profile du client",
        	"Next": "Suivant",
        	"Back": "Précédent",
        	"Cancel": "Annuler",
        	"Choose the requested services": "Sélection des services",
        	"Choose who will attend the client": "Sélection de l'employé",
        	"No preference": "Aucune préférance",
        	"Choose the appointment date & time": "Sélection de la date & heure",
        	"Store is closed": "Fermé",
        	"Change view": "Changer la vue",
        	"Week view": "Semaine",
        	"Day view": "Jour",
        	"List view": "Liste",
        	"Filter by employees": "Filtrer par employés",
        	"Notifications": "Notifications",
        	"No notifications for now.": "Aucune notification pour l'instant",
        	"Agenda": "Horaire",
        	"Sun": "Dim",
        	"Mon": "Lun",
        	"Tues": "Mar",
        	"Wed": "Mer",
        	"Thur": "Jeu",
        	"Fri": "Ven",
        	"Sat": "Sam",
        	"Jan": "Jan",
        	"Feb": "Fév",
        	"Mar": "Mars",
        	"Apr": "Avr",
        	"May": "Mai",
        	"Jun": "Juin",
        	"Jul": "Jui",
        	"Aug": "Aout",
        	"Sep": "Sept",
        	"Oct": "Oct",
        	"Nov": "Nov",
        	"Dec": "Déc",
        	"January": "Janvier",
        	"February": "Février",
        	"March": "Mars",
        	"April": "Avril",
        	"June": "Juin",
        	"July": "Juillet",
        	"August": "Aout",
        	"September": "Septembre",
        	"October": "Octobre",
        	"November": "Novembre",
        	"December": "Décembre",
          "Mmh looks like you are lost.":"Mmh vous semblez perdu.",
          "Let's go back home":"Retournons à la page d'accueil",
        	"No available times for that day": "Aucune disponibilité pour cette journée",
        	"No available times for this employee today": "Aucune disponibilité pour cet employé aujourd'hui",
        	"Add a note": "Add a note",
          "All day":"Jour complet",
          "Made with ❤ in Montreal":"Fait avec ❤ à Montréal",
          "LAUNCHING MARCH 2020":"LANCEMENT EN MARS 2020",
          "HOME":"ACCUEIL",
          "FAQ":"FAQ",
          "Your email":"Votre courriel",
          "Loading":"Chargement",
          "Submit your email to get a 3 month free trial.":"Inscrivez-vous et profitez d'un essai de 3 mois gratuit.",
          "Sign up now to be notified when we launch and receive 3 MONTHS FREE.":"Inscrivez-vous afin d'être avisé lors de notre lancement et de profiter de 3 MOIS GRATUITS.",
          "Get notified when we launch":"M'aviser lors du lancement",
          "Get notified on launch day":"M'aviser lors du lancement",
          "Why you need Dailyworks":"Pourquoi vous avez besoin de Dailyworks",
          "Your phone keeps ringing to book appointments":"Le téléphone sonne sans-arrêt pour fixer des rendez-vous",
          "Finding an available time slot requires hardcore university maths":"Trouver une disponibilité mutuelle avec vos clients est un vrai casse-tête",
          "You can't book appointments when your business is closed":"Aucun rendez-vous ne peut être fixé après les heures d'ouvertures",
          "If my business is located in Turkmenistan, can I still register on Dailyworks?":"Si mon commerce est situé au Turkmenistan, puis-je tout de même m'inscire sur Dailyworks?",
          "Sadly for the moment, we can only host Canadian-based businesses. We will however be expanding very soon!":"Malheureusement pour le moment, nous pouvons uniquement accueilir des commerces basés au Canada, mains nous prendrons de l'expension tres bientôt!",
          "What type of businesses can your platform host?":"Quels types de commerces cette plateforme peut-elle servir?",
          "If you are a barbershop, mechanic, doctor, veterinary, psychologist, physiotherapist, optometrist, or any other service-driven company, we are more than pleased to host your business on our platform.":"Si vous etes un barbier, mécanicien, docteur, vétérinaire, psychologue, physiothérapeute, optométriste,ou tout autre type de commerce orienté-service, nous sommes plus qu'heureux de vous accueillir sur notre plateforme.",
          "I’m not a tech expert, will I still be able to get around on your platform?":"Je ne suis pas un expert techno, vais-je être capable de me débrouiller sur votre plateforme?",
          "Our platform is so simple that we are convinced you won’t have any trouble. If you however need assistance, our premium members can request a free in-person setup assistant who will help get around our platform and setup your account. Our assistants can help you register, import your appointments or complete any other task. Our free tier member can request the same in-person setup assistant for 60$.":"Notre plateforme est si simple que nous sommes convaincus que vous n'aurez aucune difficulté. Si vous avez toutefois besoin d'assistance, nos membres premium peuvent demander une assistane en personne gratuite qui vous aider à vous retrouver sur la plateforme. Nos assistants vous aideront à vous enregistrer, importer vos rendez-vous ou toute autre tache. Nos membres gratuits peuvent demander la même assistance pour 60$.",
          "How much does your platform cost?":"Combien coute votre plateforme?",
          "We offer a free tier that includes our top-of-the-line appointment manager. However, the premium 50$/month membership allows your customers to book appointments online instead of bothering you on the phone, and allows you to take advantage of our 24/7 customer service and free in-person setup assistant.":"Nous offrons un abonnement gratuit qui vous donne acces à notre fameux organisateur de rendez-vous. Cependant, l'abonnement premium de 50$/mois permet à vos clients de fixer des rendez-vous en ligne sans vous déranger au téléphone, et vous permet de profiter de notre service à la clientele 24/7 et du service d'assistance en personne gratuit.",
          "What can I do on Dailyworks?":"Que puis-je faire avec Dailyworks?",
          "On our platform, you can create, cancel and move appointments whenever you want. Your clients will receive a notification whenever an appointment is created or modified.":"Sur notre plateforme, vous pouvez fixer, modifier et annuler des rendez-vous quand vous le voulez. Vos clients recoivent une notification quand leurs rendez-vous sont modifiés.",
          "What is Dailyworks?":"Mais qu'est-ce que Dailyworks?",
          "Dailyworks is an online appointment manager for service-driven businesses.":"Dailyworks est un gestionnaire de rendez-vous en ligne pour les commerces orientés-service.",
          "Welcome to our FAQ":"Bienvenue sur notre FAQ",
          "Why should I register on Dailyworks?":"Pourquoi devrais-je m'inscrire à Dailyworks?",
          "Our teams are constantly releasing new features to help your business thrive. Also, you can count on our top notch customer service to help you solve any problems. You definitely won’t regret it.":"Nos équipes publient constamment des nouvelles fonctionnalités pour aider à la réussite de votre commerce. De plus, vous pouvez compter sur notre super équipe de soutien pour régler tous vos problèmes. Vous ne le regretterez pas!",
          "Looks like there's an error, please try again.":"Il semble y avoir une erreur, veuillez réessayer.",
          "Looks like your email is already in our waitlist. Since you seem very interested we might launch earlier for you.":"Votre courriel semble déjà être sur notre liste d'attente. Puisque vous semblez si intéressé, nous pourrions lancer la plateforme plus tôt pour vous.",
          "Thank you for joining the waitlist! You won\'t regret it.":"Merci d'avoir rejoint la liste d'attente! Vous ne le regretterez pas.",
          "Do more work in less time by letting your customers book appointments by themselves online.":"Accomplissez plus en moins de temps en laissant vos clients réserver par eux-même en ligne.",
          "Show to customers that you have an available spot right now, when their favorite business doesn't.":"Montrez aux clients que vous avez une place libre maintenant, lorsque que leur commerce favoris n'en a pas.",
          "What can Dailyworks do for you?":"Qu'est-ce que Dailyworks peut faire pour vous?",
          "You cannot book appointments while you sleep. We can help with that.":"Vous ne pouvez pas prendre des rendez-vous quand vous dormez. Nous pouvons vous aider."
        };

        var translatedWord = frTranslateDict[wordToTranslate];
        if(!translatedWord){
          return wordToTranslate;
        }else{
          return translatedWord;
        }


    }else if(languageCookie == "en"){
      return wordToTranslate;
    }else{
      return wordToTranslate;
    }

}else{
  return wordToTranslate;
}
}

</script>

<style>
  /* roboto-regular - latin */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  font-display:swap;
  src: local('Roboto'), local('Roboto-Regular'),
       url('../fonts/roboto-v20-latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
       url('../fonts/roboto-v20-latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
}
/* roboto-900 - latin */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 900;
  font-display:swap;
  src: local('Roboto Black'), local('Roboto-Black'),
       url('../fonts/roboto-v20-latin-900.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
       url('../fonts/roboto-v20-latin-900.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
}

  *{
    box-sizing:border-box;
  }
body{
  width:100%;
  height:100%;
  margin:0;
}



  .spinner {
    margin: 0;
      top: 50%;
      width: 100%;
      transform: translateY(-50%);
      position: absolute;
      padding: 0;
      left: 0;

}

.spinner > div {
  width: 18px;
    height: 18px;
    margin-left: 11.5px;
    background-color: #fff;
    border-radius: 100%;
    display: inline-block;
    -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;
    animation: sk-bouncedelay 1.4s infinite ease-in-out both;
}

.spinner .bounce1 {
  -webkit-animation-delay: -0.32s;
  animation-delay: -0.32s;
}

.spinner .bounce2 {
  -webkit-animation-delay: -0.16s;
  animation-delay: -0.16s;
}

@-webkit-keyframes sk-bouncedelay {
  0%, 80%, 100% { -webkit-transform: scale(0) }
  40% { -webkit-transform: scale(1.0) }
}

@keyframes sk-bouncedelay {
  0%, 80%, 100% {
    -webkit-transform: scale(0);
    transform: scale(0);
  } 40% {
    -webkit-transform: scale(1.0);
    transform: scale(1.0);
  }
}

.fullScreeenTransparentLoaderDiv{
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: block;
}
.spinnerSquareContainer{
  position: absolute;
      top: 50%;
      transform: translateY(-50%) translateX(-50%);
      height: 100px;
      left: 50%;
      width: 100px;
      border-radius: 10px;
      background-color: rgba(0,0,0,0.5);
}
</style>



<script>
  var weekDayName = [translateWord('Sun'), translateWord('Mon') , translateWord('Tues'), translateWord('Wed'), translateWord('Thur'), translateWord('Fri'), translateWord('Sat')];
  var monthsName = [translateWord('Jan'), translateWord('Feb'), translateWord('Mar'), translateWord('Apr'), translateWord('May'), translateWord('Jun'), translateWord('Jul'), translateWord('Aug'), translateWord('Sep'), translateWord('Oct'), translateWord('Nov'), translateWord('Dec')];
  var fullMonthsName = [translateWord('January'), translateWord('February'), translateWord('March'), translateWord('April'), translateWord('May'), translateWord('June'), translateWord('July'), translateWord('August'), translateWord('September'), translateWord('October'), translateWord('November'), translateWord('December')];






function displayLoader(){
  var loaderHtml = "<div class='spinnerSquareContainer'><div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div></div>";
  var fullScreenDiv = document.createElement('div');
  fullScreenDiv.classList = "fullScreeenTransparentLoaderDiv";
  fullScreenDiv.innerHTML=loaderHtml;
  document.body.appendChild(fullScreenDiv);
}
function deleteLoader(){
  var loaders = document.getElementsByClassName('fullScreeenTransparentLoaderDiv');
  for(var i=0;i<loaders.length;i++){
    loaders[i].remove();
  }
}

function decimalToHour12Format(num){
  var hrs = parseInt(Number(num));
  var min = Math.round((Number(num)-hrs) * 60);
  if(min == 0){
      min = "00";
  }
  var hourString = "";
  if(hrs>11){
    var amPm = "PM";
    hourString = (hrs-12)+':'+min+amPm;
  }else{
    var amPm = "AM";
    hourString = hrs+':'+min+amPm;
  }
  return hourString;
}




















//different functions


  function createTimePicker(inputField, divToPutPickerInto, closeTimePopup, dataTime){
    var finishHour = 11;
    var startingHour = 0;

    var placeholderTimeString = "";
    var hourPicked = null
    var minutePicked = null;
    var amPmPicked = null;


    if(dataTime != -1){

        hourPicked = parseInt(Number(dataTime));
        minutePicked = Math.round((Number(dataTime)-hourPicked)*60);
        var hourDisplay = hourPicked;
        var minunteDisplay = minutePicked;
        if(minunteDisplay < 10){
            minunteDisplay = "0"+minunteDisplay;
        }
        if(hourPicked<10){
          hourDisplay = "0"+hourDisplay;
        }
        if(hourPicked<12){
          placeholderTimeString+="AM";
          amPmPicked = "AM";
          placeholderTimeString = (hourDisplay)+":"+minunteDisplay+amPmPicked;
        }else{
          placeholderTimeString+="PM";
          amPmPicked="PM";
          placeholderTimeString = (hourDisplay-12)+":"+minunteDisplay+amPmPicked;
        }

    }else{
      placeholderTimeString = "00:00AM";
    }




    var timeString = "";

    var timePickerPopup = document.createElement("div");
    timePickerPopup.classList+= "timePickerPopupMainDiv";


      //create placeholder header time
      var placeholderHeaderTime = document.createElement("p");
      placeholderHeaderTime.innerText = placeholderTimeString;
      placeholderHeaderTime.classList.add('timePickerPlaceholderTimeHeader');
      timePickerPopup.appendChild(placeholderHeaderTime)


      //create hour header
      var hoursHeader = document.createElement('p');
      hoursHeader.classList.add('timePickerHeaderP');
      hoursHeader.innerText = "Hours";
      timePickerPopup.appendChild(hoursHeader);

      //create hours table
        var hoursBreakPoint = 6;
        var nbRowsHours = 2;
        var hoursTable = document.createElement("table");
        hoursTable.classList += "timePickerHoursTable";
        timePickerPopup.appendChild(hoursTable);

        //create minutes header
        var minutesHeader = document.createElement('p');
        minutesHeader.classList.add('timePickerHeaderP');
        minutesHeader.innerText = "Minutes";
        timePickerPopup.appendChild(minutesHeader);

      //create minutes table
        var minutesBreakPoint = 6;
        var nbRowsMinutes = 2;
        var minutesTable = document.createElement("table");
        minutesTable.classList += "timePickerMinutesTable";
        timePickerPopup.appendChild(minutesTable);


      function createTimesTable(){


    //create hours rows
          var hoursRow = document.createElement("tr");
          var hoursCell = null;

          for(var i = startingHour, counter = 1;i<finishHour+1;i++, counter++){
            hoursCell = document.createElement('td');
            hoursCell.setAttribute("time", i);
            if(i<10){
              hoursCell.innerText= "0"+i;
            }else{
              hoursCell.innerText= i;
            }

            hoursCell.onclick = function(){
              setHours(this.getAttribute('time'));
            }

            hoursRow.appendChild(hoursCell);

            if (counter == hoursBreakPoint && i!=finishHour) {
              counter = 0;
              hoursTable.appendChild(hoursRow);
              hoursRow = document.createElement("tr");
            }
          }
          hoursTable.appendChild(hoursRow);





    //create minutes rows
          var minutesRow = document.createElement("tr");
          var minutesCell = null;

          for(var i = 0, counter = 1; i< 60; i+=5, counter++){
            minutesCell = document.createElement('td');
            minutesCell.setAttribute("time", i);
            if(i <10){
              minutesCell.innerText = "0"+i;

            }else{
            minutesCell.innerText = i;
            }

            minutesCell.onclick = function(){
              setMinutes(this.getAttribute('time'));
            }

            minutesRow.appendChild(minutesCell);

            if (counter == minutesBreakPoint) {
              counter = 0;
              minutesTable.appendChild(minutesRow);
              minutesRow = document.createElement("tr");
            }
          }
    minutesTable.appendChild(minutesRow);




    //create am pm div
    var amPmContainer = document.createElement('div');
    var amContainer = document.createElement('p');
    var pmContainer = document.createElement('p');

    amPmContainer.appendChild(amContainer);
    amPmContainer.appendChild(pmContainer);

    amPmContainer.classList.add('timePickerAmPmContainer');
    amContainer.classList.add('timePickerAmContainer');
    pmContainer.classList.add('timePickerPmContainer');

    amContainer.innerText = "AM";
    pmContainer.innerText = "PM";

    amContainer.onclick = function(){
      setAmPm("AM");
      if(hourPicked>11){
        hourPicked = parseInt(hourPicked)-12;
      }
    }
    pmContainer.onclick = function(){
      setAmPm("PM");
      if(hourPicked<12){
        hourPicked = parseInt(hourPicked)+12;
      }
    }
    timePickerPopup.appendChild(amPmContainer);

      }



    function setMinutes(minuteVar){
      minutePicked = minuteVar;
      setPlaceholderHeaderTime();
    }
    function setHours(hourVar){
      hourPicked = hourVar
      setPlaceholderHeaderTime();
    }
    function setAmPm(choicePicked){
      amPmPicked = choicePicked;
      setPlaceholderHeaderTime();
    }

    function setPlaceholderHeaderTime(){
      var timeString = "";
      if(!hourPicked){
        timeString+="00:";
      }else{
        if(hourPicked>11){
          timeString+=(parseInt(hourPicked)-12)+":";
        }else{
          timeString+=hourPicked+":";
        }
      }
      if(!minutePicked){
        timeString+="00";
      }else{
        timeString+=minutePicked;
      }
      if(!amPmPicked){
        timeString+="AM";
      }else{
        timeString+=amPmPicked;
      }
      placeholderHeaderTime.innerText = timeString;
    }





    function destroyTimePopup(){
    timePickerPopup.remove();
    closePageOverlay();
    hourPicked = false;
    minutePicked = false;

    }
    function closePageOverlay(){
      closeTimePopup();
    }


    function setInputValue(){
      var timeString = "";
      var dataTimeAttribute="";
      var attributeHour = 0;
      if(!hourPicked){
        timeString+="00:";
      }else{
        if(!amPmPicked){
          attributeHour=parseInt(hourPicked);
          if(parseInt(hourPicked)>11){
            timeString+=(parseInt(hourPicked)-12);
          }else{
            timeString+=hourPicked;
          }
        }else if(amPmPicked=="AM"){
          attributeHour=parseInt(hourPicked);
          if(parseInt(hourPicked)>11){
            timeString+=(parseInt(hourPicked)-12);
          }else{
            timeString+=hourPicked;
          }
        }else{
          //is pm
          attributeHour=(parseInt(hourPicked));
          if(parseInt(hourPicked)>11){
            timeString+=(parseInt(hourPicked)-12);
          }else{
            timeString+=hourPicked;
          }
        }
        timeString+=":";
      }

      if(!minutePicked){
        timeString+="00"
      }else{
        timeString+=minutePicked;
        attributeHour+=((parseInt(minutePicked)/60));
      }
      dataTimeAttribute = attributeHour;
      if(!amPmPicked){
        timeString+="AM"
      }else{
        timeString+=amPmPicked;
      }

      inputField.value = timeString;
      inputField.setAttribute('data-time', dataTimeAttribute);
    }


    createTimesTable();



    //create cancel button
    var cancelMainDiv = document.createElement('div');
    cancelMainDiv.classList+="timePickerCancelMainDiv";
    var cancelTextInsideDiv = document.createElement('div');
    cancelTextInsideDiv.classList+='timePickerCancelInsideDiv';
    cancelTextInsideDiv.innerHTML = "Cancel";
    cancelMainDiv.appendChild(cancelTextInsideDiv);
    timePickerPopup.appendChild(cancelMainDiv);
    cancelTextInsideDiv.onclick = function(){
      timePickerPopup.remove();
      closePageOverlay();
    }

    // create done button
    var doneMainDiv = document.createElement('div');
    doneMainDiv.classList+="timePickerDoneMainDiv";
    var doneTextInsideDiv = document.createElement('div');
    doneTextInsideDiv.classList+='timePickerDoneInsideDiv';
    doneTextInsideDiv.innerHTML = "Done";
    doneMainDiv.appendChild(doneTextInsideDiv);
    timePickerPopup.appendChild(doneMainDiv);
    doneTextInsideDiv.onclick = function(){
      setInputValue();
      timePickerPopup.remove();
      closePageOverlay();
    }


        divToPutPickerInto.appendChild(timePickerPopup);


  }

































  function createDateTimePicker(inputField, divToPutPickerInto, closeTimePopup, dataDate, dataTime){
    var hourPicked = null
    var minutePicked = null;
    var amPmPicked = null;
    var dayPicked = null;
    var monthPicked = null;
    var yearPicked = null;

    var todayDate = new Date();

    var placeholderTimeString = "";
    var placeholderDateString = "";

    if(dataDate != -1){
      var splittedDateString = dataDate.split('/');
      yearPicked = splittedDateString[0];
      monthPicked = parseInt(splittedDateString[1]);
      dayPicked = splittedDateString[2];

      placeholderDateString = monthsName[monthPicked-1]+" "+ dayPicked+", "+yearPicked;
    }else{

      placeholderDateString = monthsName[todayDate.getMonth()] +" "+ todayDate.getDate()+", "+todayDate.getFullYear();
    }
    if(dataTime != -1){

        hourPicked = parseInt(Number(dataTime));
        minutePicked = Math.round((Number(dataTime)-hourPicked)*60);
        var hourDisplay = hourPicked;
        var minunteDisplay = minutePicked;
        if(minunteDisplay < 10){
            minunteDisplay = "0"+minunteDisplay;
        }
        if(hourPicked<10){
          hourDisplay = "0"+hourDisplay;
        }
        if(hourPicked<12){
          placeholderTimeString+="AM";
          amPmPicked = "AM";
          placeholderTimeString = (hourDisplay)+":"+minunteDisplay+amPmPicked;
        }else{
          placeholderTimeString+="PM";
          amPmPicked="PM";
          placeholderTimeString = (hourDisplay-12)+":"+minunteDisplay+amPmPicked;
        }

    }else{
      placeholderTimeString = "00:00AM";
    }


    var finishHour = 11;
    var startingHour = 0;








    var timePickerPopup = document.createElement("div");
    timePickerPopup.classList+= "timePickerPopupMainDiv";

    var timeMainContainer = document.createElement('div');
    timeMainContainer.classList.add('dateTimePickerMainTypeInnerContainer');
    timeMainContainer.style.display = "block";

    var dateMainContainer = document.createElement('div');
    dateMainContainer.classList.add('dateTimePickerMainTypeInnerContainer');
    dateMainContainer.style.display = "none";


      var dateTimeDisplayDiv = document.createElement('div');
      dateTimeDisplayDiv.classList.add("dateTimePickerChangeViewDivMainContainer");


      //create time button
      var timeDisplayInsideDiv = document.createElement('div');
      timeDisplayInsideDiv.classList.add('dateTimePickerChangeViewInnerDiv');
      var clockImg = document.createElement('img');
      clockImg.src = "assets/icons/octiconsSvg/watch.svg";
      clockImg.classList.add('dateTimePickerChangeViewIcon');
      timeDisplayInsideDiv.appendChild(clockImg);
      dateTimeDisplayDiv.appendChild(timeDisplayInsideDiv);
      timePickerPopup.appendChild(dateTimeDisplayDiv);
      clockImg.onclick = function(){
        timeMainContainer.style.display = "block";
        dateMainContainer.style.display = "none";
      }

      //create calendar button
      var dateDisplayInsideDiv = document.createElement('div');
      dateDisplayInsideDiv.classList.add('dateTimePickerChangeViewInnerDiv');
      var calendarImg = document.createElement('img');
      calendarImg.src = "assets/icons/octiconsSvg/calendar.svg";
      calendarImg.classList.add('dateTimePickerChangeViewIcon');
      dateDisplayInsideDiv.appendChild(calendarImg);
      dateTimeDisplayDiv.appendChild(dateDisplayInsideDiv);
      timePickerPopup.appendChild(dateTimeDisplayDiv);
      calendarImg.onclick = function(){
        timeMainContainer.style.display = "none";
        dateMainContainer.style.display = "block";
      }

      //create placeholder header date
      var placeholderHeaderDate = document.createElement("p");
      placeholderHeaderDate.innerText = placeholderDateString;
      placeholderHeaderDate.classList.add('timePickerPlaceholderTimeHeader');
      timePickerPopup.appendChild(placeholderHeaderDate);

      //create placeholder header time
      var placeholderHeaderTime = document.createElement("p");
      placeholderHeaderTime.innerText = placeholderTimeString;
      placeholderHeaderTime.classList.add('timePickerPlaceholderTimeHeader');
      timePickerPopup.appendChild(placeholderHeaderTime);


      //create hour header
      var hoursHeader = document.createElement('p');
      hoursHeader.classList.add('timePickerHeaderP');
      hoursHeader.innerText = "Hours";
      timeMainContainer.appendChild(hoursHeader);

      //create hours table
        var hoursBreakPoint = 6;
        var nbRowsHours = 2;
        var hoursTable = document.createElement("table");
        hoursTable.classList += "timePickerHoursTable";
        timeMainContainer.appendChild(hoursTable);

        //create minutes header
        var minutesHeader = document.createElement('p');
        minutesHeader.classList.add('timePickerHeaderP');
        minutesHeader.innerText = "Minutes";
        timeMainContainer.appendChild(minutesHeader);

      //create minutes table
        var minutesBreakPoint = 6;
        var nbRowsMinutes = 2;
        var minutesTable = document.createElement("table");
        minutesTable.classList += "timePickerMinutesTable";
        timeMainContainer.appendChild(minutesTable);


      function createTimesTable(){


    //create hours rows
          var hoursRow = document.createElement("tr");
          var hoursCell = null;

          for(var i = startingHour, counter = 1;i<finishHour+1;i++, counter++){
            hoursCell = document.createElement('td');
            hoursCell.setAttribute("time", i);
            if(i<10){
              hoursCell.innerText= "0"+i;
            }else{
              hoursCell.innerText= i;
            }

            hoursCell.onclick = function(){
              setHours(this.getAttribute('time'));
            }

            hoursRow.appendChild(hoursCell);

            if (counter == hoursBreakPoint && i!=finishHour) {
              counter = 0;
              hoursTable.appendChild(hoursRow);
              hoursRow = document.createElement("tr");
            }
          }
          hoursTable.appendChild(hoursRow);





    //create minutes rows
          var minutesRow = document.createElement("tr");
          var minutesCell = null;

          for(var i = 0, counter = 1; i< 60; i+=5, counter++){
            minutesCell = document.createElement('td');
            minutesCell.setAttribute("time", i);
            if(i <10){
              minutesCell.innerText = "0"+i;

            }else{
            minutesCell.innerText = i;
            }

            minutesCell.onclick = function(){
              setMinutes(this.getAttribute('time'));
            }

            minutesRow.appendChild(minutesCell);

            if (counter == minutesBreakPoint) {
              counter = 0;
              minutesTable.appendChild(minutesRow);
              minutesRow = document.createElement("tr");
            }
          }
    minutesTable.appendChild(minutesRow);




    //create am pm div
    var amPmContainer = document.createElement('div');
    var amContainer = document.createElement('p');
    var pmContainer = document.createElement('p');

    amPmContainer.appendChild(amContainer);
    amPmContainer.appendChild(pmContainer);

    amPmContainer.classList.add('timePickerAmPmContainer');
    amContainer.classList.add('timePickerAmContainer');
    pmContainer.classList.add('timePickerPmContainer');

    amContainer.innerText = "AM";
    pmContainer.innerText = "PM";

    amContainer.onclick = function(){
      setAmPm("AM");
      if(hourPicked>11){
        hourPicked = parseInt(hourPicked)-12;
      }
    }
    pmContainer.onclick = function(){
      setAmPm("PM");
      if(hourPicked<12){
        hourPicked = parseInt(hourPicked)+12;
      }
    }
    timeMainContainer.appendChild(amPmContainer);

      }





      function createDatePicker(){
        var calendarPickerDate = new Date();
        var theDateToday = new Date();

        var calendarMainDivSelectorDate = document.createElement('div');
        calendarMainDivSelectorDate.classList.add("calendarPopupDatePicker");



        var topPickerDiv = document.createElement('div');
        topPickerDiv.classList.add('monthCalendarPickerTopDiv');

        var leftArrow  = document.createElement('p');
        leftArrow.classList.add('monthCalendarPickerLeftArrow');
        leftArrow.innerHTML = "&#9668;";
        var rightArrow  = document.createElement('p');
        rightArrow.classList.add('monthCalendarPickerRightArrow');
        rightArrow.innerHTML = "&#9658;";

        var monthName  = document.createElement('p');
        monthName.classList.add('monthCalendarPickerMonthName');
        monthName.innerText = fullMonthsName[calendarPickerDate.getMonth()]+" "+calendarPickerDate.getFullYear();

        topPickerDiv.appendChild(leftArrow);
        topPickerDiv.appendChild(rightArrow);
        topPickerDiv.appendChild(monthName);
        calendarMainDivSelectorDate.appendChild(topPickerDiv);


        var divAroundTable = document.createElement('div');
        divAroundTable.classList.add('dateTableContainer');
        createTable(calendarPickerDate);





        leftArrow.onclick = function(){
        changeMonth(-1);
        }
        rightArrow.onclick = function(){
        changeMonth(1);
        }


        function changeMonth(plusOrMinus){

                    var lastDayOfCurrentMonth = new Date(calendarPickerDate.getFullYear(), calendarPickerDate.getMonth()+1, 0).getDate();
                    var lastDayOfNextMonth = new Date(calendarPickerDate.getFullYear(), calendarPickerDate.getMonth()+2, 0).getDate();
                    var lastDayOfPastMonth = new Date(calendarPickerDate.getFullYear(), calendarPickerDate.getMonth(), 0).getDate();
                    if(plusOrMinus == 1){
                    //next Month
                      if(lastDayOfNextMonth<lastDayOfCurrentMonth){
                      calendarPickerDate.setDate(lastDayOfNextMonth);
                      calendarPickerDate.setMonth(calendarPickerDate.getMonth()+1);
                      }else{
                      calendarPickerDate.setMonth(calendarPickerDate.getMonth()+1);
                      }
                    }else{
                    //past month == -1
                      if(lastDayOfPastMonth<lastDayOfCurrentMonth){
                      calendarPickerDate.setDate(lastDayOfPastMonth);
                      calendarPickerDate.setMonth(calendarPickerDate.getMonth()-1);
                      }else{
                      calendarPickerDate.setMonth(calendarPickerDate.getMonth()-1);

                      }
                    }

                        createTable(calendarPickerDate);

                        monthName.innerText = fullMonthsName[calendarPickerDate.getMonth()]+" "+calendarPickerDate.getFullYear();
        }




         function createTable(theDate){
        divAroundTable.innerHTML = "";
                   var monthNumber = theDate.getMonth();
                   var yearNumber = theDate.getFullYear();

                   var daysInMonth = new Date(yearNumber, monthNumber+1, 0).getDate();

                   var startDayOfMonth = new Date(yearNumber, monthNumber, 1).getDay();
                   var endDayOfMonth = new Date(yearNumber, monthNumber, daysInMonth).getDay();

                   // Determine the number of blank squares before start of month
                       var squares = [];
                       if (startDayOfMonth != 0) {
                         for (var i=0; i<startDayOfMonth; i++) {
                           squares.push("b");
                         }
                       }

                       // Populate the days of the month
                       for (var i=1; i<=daysInMonth; i++) {
                         squares.push(i);
                       }

                       // Determine the number of blank squares after end of month
                       if (endDayOfMonth != 6) {
                         var blanks = endDayOfMonth==0 ? 6 : 6-endDayOfMonth;
                         for (var i=0; i<blanks; i++) {
                           squares.push("b");
                         }
                       }


                   var monthTable = document.createElement("table");
                   monthTable.classList.add("monthCalendarSelectorTable");

                   // First row - Days
                       var monthNameRow = document.createElement("tr");
                       var calendarCell = null;
                       for (var i=0;i<weekDayName.length;i++) {
                         calendarCell = document.createElement("td");
                         calendarCell.innerHTML = weekDayName[i];
                         monthNameRow.appendChild(calendarCell);
                       }
                       monthNameRow.classList.add("monthNameRow");
                       monthTable.appendChild(monthNameRow);




                       // Days in Month
                       var totalDays = squares.length;
                       var calendarRow = document.createElement("tr");
                       var monthDateCell = null;

                       for (var i=0; i<totalDays; i++) {
                         monthDateCell = document.createElement("td");
                         if (squares[i]=="b") {
                           monthDateCell.classList.add("blankDate");
                         } else {

                           var wrapperInsideTd = document.createElement("div");
                           wrapperInsideTd.innerHTML = "<div class='monthDateCell'>"+squares[i]+"</div>";
                           wrapperInsideTd.classList.add("wrapperInsideMonthCell");
                           monthDateCell.appendChild(wrapperInsideTd);
                           var newMonthNumber = monthNumber;
                           monthDateCell.setAttribute("date", yearNumber+"/"+(newMonthNumber+1)+"/"+squares[i]);



                           if(theDateToday.getDate() > squares[i] && theDateToday.getMonth() == newMonthNumber && theDateToday.getFullYear() == yearNumber){

                           wrapperInsideTd.classList.add('calendarTextBlocked');
                         }else if(theDateToday.getMonth() >newMonthNumber && theDateToday.getFullYear() == yearNumber){
                           //later month but same year
                             wrapperInsideTd.classList.add('calendarTextBlocked');
                           }else if(theDateToday.getFullYear() > yearNumber){
                         //later year
                         wrapperInsideTd.classList.add('calendarTextBlocked');
                       }else{
                        wrapperInsideTd.classList.add('calendarTextAvailable');
                         monthDateCell.addEventListener("click", function(){

                           var splittedString = this.getAttribute('date').split('/');
                           setDay(splittedString[2]);
                           setYear(splittedString[0]);
                           setMonth(splittedString[1]);
                         });
                       }


                         }
                         calendarRow.appendChild(monthDateCell);
                         if (i!=0 && (i+1)%7==0) {
                           monthTable.appendChild(calendarRow);
                           calendarRow = document.createElement("tr");
                         }
                       }


                   divAroundTable.appendChild(monthTable);
         }
        calendarMainDivSelectorDate.appendChild(divAroundTable);
        dateMainContainer.appendChild(calendarMainDivSelectorDate);



      }

timePickerPopup.appendChild(dateMainContainer);
timePickerPopup.appendChild(timeMainContainer);

      //create cancel button
      var cancelMainDiv = document.createElement('div');
      cancelMainDiv.classList+="timePickerCancelMainDiv";
      var cancelTextInsideDiv = document.createElement('div');
      cancelTextInsideDiv.classList+='timePickerCancelInsideDiv';
      cancelTextInsideDiv.innerHTML = "Cancel";
      cancelMainDiv.appendChild(cancelTextInsideDiv);
      timePickerPopup.appendChild(cancelMainDiv);
      cancelTextInsideDiv.onclick = function(){
        timePickerPopup.remove();
        closePageOverlay();
      }

      // create done button
      var doneMainDiv = document.createElement('div');
      doneMainDiv.classList+="timePickerDoneMainDiv";
      var doneTextInsideDiv = document.createElement('div');
      doneTextInsideDiv.classList+='timePickerDoneInsideDiv';
      doneTextInsideDiv.innerHTML = "Done";
      doneMainDiv.appendChild(doneTextInsideDiv);
      timePickerPopup.appendChild(doneMainDiv);
      doneTextInsideDiv.onclick = function(){
        setInputValue();
        timePickerPopup.remove();
        closePageOverlay();
      }




    function setMinutes(minuteVar){
      minutePicked = minuteVar;
      setPlaceholderHeaderTime();
    }
    function setHours(hourVar){
      hourPicked = hourVar
      setPlaceholderHeaderTime();
    }
    function setAmPm(choicePicked){
      amPmPicked = choicePicked;
      setPlaceholderHeaderTime();
    }
    function setDay(choicePicked){
      dayPicked = choicePicked;
      setPlaceholderHeaderTime();
    }
    function setMonth(choicePicked){
      monthPicked = choicePicked;
      setPlaceholderHeaderTime();
    }
    function setYear(choicePicked){
      yearPicked = choicePicked;
      setPlaceholderHeaderTime();
    }

    function setPlaceholderHeaderTime(){
      var timeString = "";
      var dateString = "";
      if(!hourPicked){
        timeString+="00:";
      }else{
        if(hourPicked>11){
          timeString+=(parseInt(hourPicked)-12)+":";
        }else{
          timeString+=hourPicked+":";
        }
      }
      if(!minutePicked){
        timeString+="00";
      }else{
        timeString+=minutePicked;
      }
      if(!amPmPicked){
        timeString+="AM";
      }else{
        timeString+=amPmPicked;
      }

      if(!monthPicked){
        dateString+=monthsName[new Date().getMonth()];
      }else{
        dateString+=monthsName[monthPicked-1];
      }

      if(!dayPicked){
        dateString+= " "+new Date().getDate();
      }else{
        dateString+=" "+dayPicked;
      }

      if(!yearPicked){
        dateString+=", "+new Date().getFullYear();
      }else{
        dateString+=", "+yearPicked;
      }
      placeholderHeaderTime.innerText = timeString;
      placeholderHeaderDate.innerText = dateString;
    }





    function destroyTimePopup(){
    timePickerPopup.remove();
    closePageOverlay();
    hourPicked = false;
    minutePicked = false;

    }
    function closePageOverlay(){
      closeTimePopup();
    }


    function setInputValue(){
      var timeString = "";
      var dataDateAttribute="";
      var dataTimeAttribute="";
      var attributeHour=0;
      if(!yearPicked){
        timeString+="2019/";
        dataDateAttribute+="2019/";
      }else{
        timeString+=yearPicked+"/";
        dataDateAttribute+=yearPicked+"/";
      }
      if(!monthPicked){
        timeString+="01/";
        dataDateAttribute+="01/";
      }else{
        timeString+=monthPicked+"/";
        dataDateAttribute+=monthPicked+"/";
      }
      if(!dayPicked){
        timeString+="01 ";
        dataDateAttribute+="01";
      }else{
        timeString+=dayPicked+" ";
        dataDateAttribute+=dayPicked;
      }

      if(!hourPicked){
        timeString+="00:";
      }else{
        if(!amPmPicked){
          attributeHour=parseInt(hourPicked);
          if(parseInt(hourPicked)>11){
            timeString+=(parseInt(hourPicked)-12);
          }else{
            timeString+=hourPicked;
          }
        }else if(amPmPicked=="AM"){
          attributeHour=parseInt(hourPicked);
          if(parseInt(hourPicked)>11){
            timeString+=(parseInt(hourPicked)-12);
          }else{
            timeString+=hourPicked;
          }
        }else{
          //is pm
          attributeHour=(parseInt(hourPicked));
          if(parseInt(hourPicked)>11){
            timeString+=(parseInt(hourPicked)-12);
          }else{
            timeString+=hourPicked;
          }
        }
        timeString+=":";
      }
      if(!minutePicked){
        timeString+="00";
      }else{
        timeString+=minutePicked;
        attributeHour+=((parseInt(minutePicked)/60));
      }
      dataTimeAttribute = attributeHour;
      if(!amPmPicked){
        timeString+="AM";
      }else{
        timeString+=amPmPicked;
      }

      console.log(timeString);
      inputField.value = timeString;
      inputField.setAttribute('data-date', dataDateAttribute);
      inputField.setAttribute('data-time', dataTimeAttribute);

      checkValidityInput(inputField);

    }

        createDatePicker();
        createTimesTable();

        divToPutPickerInto.appendChild(timePickerPopup);


  }




  function checkValidityInput(inputElement){

    if(inputElement.classList.contains('existingStoreAbsenceStart')){
      var existingEndInput = inputElement.parentNode.getElementsByClassName('existingStoreAbsenceEnd')[0];
      if(existingEndInput.getAttribute('data-date') == -1){
        setInputValuesFromInput(inputElement, existingEndInput);
      }else{
        var startRelativeToEnd = compareStartToEnd(inputElement, existingEndInput);
        if(startRelativeToEnd==1){
          setInputValuesFromInput(inputElement, existingEndInput);
        }
      }
    }else if(inputElement.classList.contains('existingStoreAbsenceEnd')){
      console.log('yooo');
      var existingStartInput = inputElement.parentNode.getElementsByClassName('existingStoreAbsenceStart')[0];
      if(existingStartInput.getAttribute('data-date') == -1){
        setInputValuesFromInput(inputElement, existingStartInput);
      }else{
        var startRelativeToEnd = compareStartToEnd(existingStartInput, inputElement);
        if(startRelativeToEnd==1){
          setInputValuesFromInput(inputElement, existingStartInput);
          console.log('nope');
        }
      }
    }else if(inputElement.classList.contains('newStoreAbsenceEnd')){
      var newStartInput = inputElement.parentNode.getElementsByClassName('newStoreAbsenceStart')[0];
      if(newStartInput.getAttribute('data-date') == -1){
        setInputValuesFromInput(inputElement, newStartInput);
      }else{
        var startRelativeToEnd = compareStartToEnd(newStartInput, inputElement);
        if(startRelativeToEnd==1){
          setInputValuesFromInput(inputElement, newStartInput);
        }
      }
    }else if(inputElement.classList.contains('newStoreAbsenceStart')){
      var newEndInput = inputElement.parentNode.getElementsByClassName('newStoreAbsenceEnd')[0];
      if(newEndInput.getAttribute('data-date') == -1){
        setInputValuesFromInput(inputElement, newEndInput);
      }else{
        var startRelativeToEnd = compareStartToEnd(inputElement, newEndInput);
        if(startRelativeToEnd==1){
          setInputValuesFromInput(inputElement, newEndInput);
        }
      }
    }

  }

  function compareStartToEnd(startInput, endInput){
    var startDate = new Date(startInput.getAttribute('data-date'));
    var startTime = parseFloat(startInput.getAttribute('data-time'));
    var endDate = new Date(endInput.getAttribute('data-date'));
    var endTime = parseFloat(endInput.getAttribute('data-time'));
    var datesCompared = compareStartDateToEndDate(startDate, endDate);
    if(datesCompared==1){

      return 1;
    }else if(datesCompared==0){
      if(startTime == endTime){
        return 0;
      }else if(startTime < endTime){
        return -1;
      }else{
        return 1;
      }
    }else{
      return -1;
    }

  }

  function setInputValuesFromInput(sourceInput, targetInput){
    targetInput.setAttribute('data-date', sourceInput.getAttribute('data-date'));
    targetInput.setAttribute('data-time', sourceInput.getAttribute('data-time'));
    targetInput.value = sourceInput.value;
  }

function compareStartDateToEndDate(startDate, endDate){
  var startDay = parseInt(startDate.getDate());
  var startMonth = parseInt(startDate.getMonth());
  var startYear = parseInt(startDate.getFullYear());

  var endDay = parseInt(endDate.getDate());
  var endMonth = parseInt(endDate.getMonth());
  var endYear = parseInt(endDate.getFullYear());


  if(startDay == endDay && startMonth==startMonth && startYear==startYear){
    return 0;
  }else if(startMonth==endMonth && startYear == endYear){
    if(startDay<endDay){
      return -1;
    }else{
      return 1;
    }
  }else if(startYear == endYear){
    if(startMonth<endMonth){
      return -1;
    }else{
      return 1;
    }
  }else{
    if(startYear<endYear){
      return -1;
    }else{
      return 1;
    }
  }
}



















function hoursMinutesToMilliseconds(hours,minutes){
return (hours*3600000)+(minutes*60000);
}

  function decimalHourToMilliseconds(decimalHour){
    return decimalHour*3600000;
  }
  function millisecondsToTime(milliseconds){

        var minutes = Math.floor((milliseconds / (1000 * 60)) % 60),
        hours = Math.floor((milliseconds / (1000 * 60 * 60)) % 24);

      hours = (hours < 10) ? "0" + hours : hours;
      minutes = (minutes < 10) ? "0" + minutes : minutes;

      return hours + ":" + minutes;
  }


  function timeToDecimal(dateX) {
    var t = dateX.getHours() +":"+dateX.getMinutes();
      var arr = t.split(':');
      var dec = parseInt((arr[1]/6)*10, 10);

      return parseFloat(parseInt(arr[0], 10) + '.' + (dec<10?'0':'') + dec);
  }

function decimalToTime(decimalNb){
 var min = Math.floor(Math.abs(decimalNb))
 var sec = Math.floor((Math.abs(decimalNb) * 60) % 60);
 return (min < 10 ? "0" : "") + min + ":" + (sec < 10 ? "0" : "") + sec;
}



  function sameDate(date1, date2){
  if(date1.getDate() == date2.getDate() && date2.getMonth() == date1.getMonth() && date1.getFullYear() == date2.getFullYear()){

  return true;
  }else{
    return false;
  }
  }



function getStartAndEndDateString(start, end){
  var stringDate = "";
  var startMinuteString = start.getMinutes();
  var endMinuteString =end.getMinutes();
  if(startMinuteString == '0'){
    startMinuteString = "00";
  }
  if(endMinuteString == "0"){
    endMinuteString == "00";
  }
  stringDate = monthName[start.getMonth()]+" "+start.getDate()+"@"+start.getHours()+":"+startMinuteString+" - "+monthName[end.getMonth()]+" "+end.getDate()+"@"+end.getHours()+":"+endMinuteString;
  return stringDate;
}

function getEventDurationInDays(start, end){
  var stopLoop = false;
  var durationDays = 1;
  var startDateObj = new Date(start);
  var endDateObj = new Date(end);
  while(stopLoop==false){
    if(sameDate(startDateObj, endDateObj)){
      return durationDays;
    }else{
      startDateObj.setDate(startDateObj.getDate()+1);
      durationDays++;
    }
  }
}





  function sameDateOrLater(date1, date2){

    if(date1.getDate() >= date2.getDate() && date1.getMonth() == date2.getMonth() && date1.getFullYear() == date2.getFullYear()){
  //later day but same month and same year

    return true;
  }else if(date1.getMonth() >= date2.getMonth() && date1.getFullYear() == date2.getFullYear()){
    //later month but same year
      return true;
    }else if(date1.getFullYear() >= date2.getFullYear()){
  //later year
  return true;
  }else{
    return false;
  }
  }







  function eventsOverlap(d1, d2){

  if(d1.endDate.getTime() < d2.startDate.getTime() || d1.startDate.getTime()> d2.endDate.getTime() ){
  return false;
  }else{
    return true;
  }

  }

  function eventsOverlapEJS(d1, d2){

  if(new Date(d1.backendDateObjEnd).getTime() < new Date(d2.backendDateObjStart).getTime() || new Date(d1.backendDateObjStart).getTime()> new Date(d2.backendDateObjEnd).getTime() ){
  return false;
  }else{
    return true;
  }

  }

  function dateIsInsideRange(date1, startDate, endDate){
    if(endDate.getTime() < date1.getTime() || startDate.getTime() > date1.getTime()){
      return false;
    }else{
      return true;
    }
  }



 function dateIsInsideRangeOfWeekEJS(date1, startDate, endDateFromObj){
   var endDate = new Date(endDateFromObj);
   endDate.setDate(endDate.getDate() + 1);
   if(endDate.getTime() <= new Date(date1).getTime() || startDate.getTime() > new Date(date1).getTime()){
     return false;
   }else{
     return true;
   }
 }


 function eventIsInsideRange(event, rangeStart, rangeEnd){
var eventStart = new Date(event.backendDateObjStart).getTime();
var eventEnd = new Date(event.backendDateObjEnd).getTime();
rangeStart = rangeStart.getTime();
rangeEnd = rangeEnd.getTime();

if(eventStart>= rangeStart && eventStart<rangeEnd){
return true;
}else if(eventEnd>rangeStart && eventEnd<=rangeEnd){
return true;
}else if(eventStart<=rangeStart && eventEnd >= rangeEnd){
return true;
}
return false;
}


  function closeAllOpenPopup(){

      document.getElementById('notificationMainAroundDiv').style.display = 'none';
      var openPopupDiv = document.getElementsByClassName('openPopupDiv');
      for(var q=0;q<openPopupDiv.length;q++){
        openPopupDiv[q].remove();
      }
  }

    function removeNotificationAlert(){
  var notificationCircleAlert = document.getElementById('newNotificationAlertCircle');
      if(notificationCircleAlert){

        $.ajax({
              url: '/removeNotificationAlertFromStore',
              type: 'post',
              success: function( data, textStatus){
                if(data == "ok"){
                  notificationCircleAlert.remove();
                }
              },
              error: function( textStatus, errorThrown ){

              }
          });




      }

    }

</script>
